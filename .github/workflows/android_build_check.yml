name: Android CI

on:
  push:
    branches: [ "feature_main/android_cd" ]
  pull_request:
    branches: [ "feature_main/android_cd" ]

jobs:
  check:
    runs-on: ubuntu-latest # 사용 되어질 os 버전

    steps:
      - name: Check out Repository #깃허브에서 ci 서버로 코드를 내려 받는 액션
        uses: actions/checkout@v3

      - name: Cache Gradle # 빌드시 캐시 작업(Actions 는 빌드 시간으로 무료 유료 처리함 무료 사용자 : 2000분, Pro 사용자 3000
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*','**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: set up JDK 11  # 안드로이드 빌드 해주어야 하기때문에 JDK 필요
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'
          cache: gradle

      - name: Grant execute permission for gradlew  #gradle 실행 권한 부여
        run: chmod +x gradlew

      - name: Build with Gradle  # 테스트 실행행
        run: ./gradlew check

  build:
    needs: check
    runs-on: ubuntu-latest

    steps:
      - name: Check out Repository
        uses: actions/checkout@v3

      - name: set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'
          cache: gradle

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle init
        run: ./gradlew init

      #    Debug 버전 ========================================================

      - name: Build assemble debug apk
        run: ./gradlew clean assembleDebug --stacktrace

      - name: Upload debug Apk
        uses: actions/upload-artifact@v3
        with:
          name: rereapp-debug.apk # Artifact 이름
          path: ./app/build/outputs/apk/debug/app-debug.apk # 폴더 지정 : 이 폴더 아래의 모든 파일들이 하나의 artifact로 지정된다.?
          retention-days: 1 # 보존 기간

      # ========================================================

      #      Release 버전 ========================================================

      #      - name: Build assemble release apk
      #        run: ./gradlew clean assembleRelease --stacktrace

      #      - name: Upload release Apk
      #        uses: actions/upload-artifact@v3
      #        with:
      #          name: rereapp-release.apk # Artifact 이름
      #          path: ./app/build/outputs/apk/release/app-release-unsigned.apk # 폴더 지정 : 이 폴더 아래의 모든 파일들이 하나의 artifact로 지정된다.?
      #          retention-days: 1 # 보존 기간

      # ========================================================


      #        Firebase App Distribution을 파일 보내기

      - name: Firebase App Distribution
        uses: wzieba/Firebase-Distribution-Github-Action@v1 #
        with:
          appId: ${{secrets.REREAPP_FIREBASE_APP_ID}}
          serviceCredentialsFileContent: ${{ secrets.REREAPP_CREDENTIAL_FILE_CONTENT }} # 추후 구글 api콘솔에서 인증키 만들어야함 https://github.com/wzieba/Firebase-Distribution-Github-Action/wiki/FIREBASE_TOKEN-migration
          groups: "안드로이드 개발자"
          file: ./app/build/outputs/apk/debug/app-debug.apk  # debug 파일
    #          file: ./app/build/outputs/apk/release/app-release-unsigned.apk  # release 파일
    #     releaseNotesFile: documents/release-note/default-note.txt  추후 추가 필요




    # 추후 추가해야 하는 부분들

    #    - name: Decrypt secrets.tar.gpg
    #      run: gpg --quiet --batch --yes --always-trust --decrypt --passphrase="$SECRET_GPG_PASSWORD" --output secrets.tar secrets.tar.gpg
    #      env:
    #        SECRET_GPG_PASSWORD: ${{ secrets.SECRET_GPG_PASSWORD }}

    #    - name: Unzip secrets.tar
    #      run: tar xvf secrets.tar

    #    - name: Run ktlint //코틀린 스타일로 검사
    #      run: ./gradlew ktlintCheck

    #    - name: Run detekt // 성능 개선및 검사 찾아주는 ..
    #      run: ./gradlew detekt

    # https:///velog.io/@revimal/Kotlin-Ktlint와-Detekt-도입하기
    # 추후 꼭 도입 필요
#      - name: Run unit tests
#        run: ./gradlew testDebugUnitTest // 빌들 방식에따라 만들수 있다 참고! 추후 필요할수도 있음
#
#      - name: Build assemble release apk //
#        run: ./gradlew assembleRelease
#
#      - name: Create android test report // 리포트?
#        uses: asadmansr/android-test-report-action@v1.2.0
#        if: ${{ always() }}
#



#      - name: Decrypt secrets.tar.gpg
#        run: gpg --quiet --batch --yes --always-trust --decrypt --passphrase="$SECRET_GPG_PASSWORD" --output secrets.tar secrets.tar.gpg
#        env:
#          SECRET_GPG_PASSWORD: ${{ secrets.SECRET_GPG_PASSWORD }}
#
#      - name: Unzip secrets.tar
#        run: tar xvf secrets.tar
